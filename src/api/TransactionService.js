/**
 * NabooApi V1
 * Here you have the first version of the naboo api to create checkout automatically
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DeleteTransactionRequest from '../model/DeleteTransactionRequest';
import DeleteTransactionResponse from '../model/DeleteTransactionResponse';
import GetAllTransaction from '../model/GetAllTransaction';
import GetOneTransaction from '../model/GetOneTransaction';
import HTTPValidationError from '../model/HTTPValidationError';
import TransactionRequest from '../model/TransactionRequest';
import TransactionResponse from '../model/TransactionResponse';

/**
* Transaction service.
* @module api/TransactionService
* @version 0.1.0
*/
export default class TransactionService {

    /**
    * Constructs a new TransactionService. 
    * @alias module:api/TransactionService
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createTransactionTransactionCreateTransactionPost operation.
     * @callback module:api/TransactionService~createTransactionTransactionCreateTransactionPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransactionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Transaction
     * This endpoint allows authenticated users to create a transaction by submitting a request with the necessary details. The endpoint ensures that the user's access level permits transaction creation and enforces a rate limit of 30 requests. It checks that the number of products is within the allowed range (1-20) and calculates the total transaction amount, applying a 20% charge for escrow transactions. It also verifies that the total amount does not exceed a specific threshold (2,000,000). The user's IP address and browser information are logged, and the transaction details are saved with relevant metadata, including a unique order ID and the associated account state. If any conditions are not met, appropriate error messages are returned.
     * @param {module:model/TransactionRequest} transactionRequest 
     * @param {module:api/TransactionService~createTransactionTransactionCreateTransactionPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransactionResponse}
     */
    createTransactionTransactionCreateTransactionPost(transactionRequest, callback) {
      let postBody = transactionRequest;
      // verify the required parameter 'transactionRequest' is set
      if (transactionRequest === undefined || transactionRequest === null) {
        throw new Error("Missing the required parameter 'transactionRequest' when calling createTransactionTransactionCreateTransactionPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TransactionResponse;
      return this.apiClient.callApi(
        '/transaction/create-transaction', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTransactionTransactionDeleteTransactionDelete operation.
     * @callback module:api/TransactionService~deleteTransactionTransactionDeleteTransactionDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteTransactionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Transaction
     * This endpoint allows authenticated users to delete a transaction by submitting a request with the necessary details. The endpoint checks the user's access level to ensure they have permission to delete transactions and enforces a rate limit of 30 requests. It verifies that the transaction belongs to the user and has not already been deleted or withdrawn. If the transaction is paid and has a payment reference, it processes refunds and updates the user's account balance accordingly.
     * @param {module:model/DeleteTransactionRequest} deleteTransactionRequest 
     * @param {module:api/TransactionService~deleteTransactionTransactionDeleteTransactionDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteTransactionResponse}
     */
    deleteTransactionTransactionDeleteTransactionDelete(deleteTransactionRequest, callback) {
      let postBody = deleteTransactionRequest;
      // verify the required parameter 'deleteTransactionRequest' is set
      if (deleteTransactionRequest === undefined || deleteTransactionRequest === null) {
        throw new Error("Missing the required parameter 'deleteTransactionRequest' when calling deleteTransactionTransactionDeleteTransactionDelete");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeleteTransactionResponse;
      return this.apiClient.callApi(
        '/transaction/delete-transaction', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOneTransactionTransactionGetOneTransactionGet operation.
     * @callback module:api/TransactionService~getOneTransactionTransactionGetOneTransactionGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetOneTransaction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get One Transaction
     * This endpoint allows authenticated users to retrieve the details of a specific transaction using the order ID. The endpoint ensures the user has read access and enforces a rate limit of 30 requests. It checks if the transaction exists in the database and if the user has the appropriate access rights,then provides a checkout URL for the transaction and others informations
     * @param {String} orderId 
     * @param {module:api/TransactionService~getOneTransactionTransactionGetOneTransactionGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetOneTransaction}
     */
    getOneTransactionTransactionGetOneTransactionGet(orderId, callback) {
      let postBody = null;
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling getOneTransactionTransactionGetOneTransactionGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'order_id': orderId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetOneTransaction;
      return this.apiClient.callApi(
        '/transaction/get-one-transaction', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTransactionsTransactionGetTransactionsGet operation.
     * @callback module:api/TransactionService~getTransactionsTransactionGetTransactionsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAllTransaction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Transactions
     * This endpoint allows authenticated users to retrieve a list of their visible transactions, up to a maximum of 50. The endpoint enforces a rate limit of 30 requests and ensures the user has read access.
     * @param {module:api/TransactionService~getTransactionsTransactionGetTransactionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetAllTransaction}
     */
    getTransactionsTransactionGetTransactionsGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetAllTransaction;
      return this.apiClient.callApi(
        '/transaction/get-transactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
