/**
 * NabooApi V1
 * Here you have the first version of the naboo api to create checkout automatically
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CashOutOrangeRequest from '../model/CashOutOrangeRequest';
import CashOutResponse from '../model/CashOutResponse';
import CashOutWaveRequest from '../model/CashOutWaveRequest';
import HTTPValidationError from '../model/HTTPValidationError';

/**
* Cashout service.
* @module api/CashoutService
* @version 0.1.0
*/
export default class CashoutService {

    /**
    * Constructs a new CashoutService. 
    * @alias module:api/CashoutService
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the cashOutOrangeMoneyCashoutOrangeMoneyPost operation.
     * @callback module:api/CashoutService~cashOutOrangeMoneyCashoutOrangeMoneyPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CashOutResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cash Out Orange Money
     * This endpoint enables a user to withdraw funds from their NabooPay account to their Orange Money account. Authentication is required, and users with the 'dev' role are not permitted to perform this operation. The amount to be withdrawn must be positive and within the user's available balance. The user's account must be active and registered in the system. After validation, the user's account balance is adjusted accordingly, and the transaction is logged for record-keeping.
     * @param {module:model/CashOutOrangeRequest} cashOutOrangeRequest 
     * @param {module:api/CashoutService~cashOutOrangeMoneyCashoutOrangeMoneyPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CashOutResponse}
     */
    cashOutOrangeMoneyCashoutOrangeMoneyPost(cashOutOrangeRequest, callback) {
      let postBody = cashOutOrangeRequest;
      // verify the required parameter 'cashOutOrangeRequest' is set
      if (cashOutOrangeRequest === undefined || cashOutOrangeRequest === null) {
        throw new Error("Missing the required parameter 'cashOutOrangeRequest' when calling cashOutOrangeMoneyCashoutOrangeMoneyPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CashOutResponse;
      return this.apiClient.callApi(
        '/cashout/orange-money', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cashOutWaveCashoutWavePost operation.
     * @callback module:api/CashoutService~cashOutWaveCashoutWavePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CashOutResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cash Out Wave
     * This endpoint allows a user to withdraw funds from their NabooPay account to their Wave account. The user must be authenticated and not possess the 'dev' role. The withdrawal amount must be greater than 10 and not exceed the user's account balance. The user's account must exist and be active. Upon successful validation, the system updates the user's account balance and records the transaction for tracking purposes.
     * @param {module:model/CashOutWaveRequest} cashOutWaveRequest 
     * @param {module:api/CashoutService~cashOutWaveCashoutWavePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CashOutResponse}
     */
    cashOutWaveCashoutWavePost(cashOutWaveRequest, callback) {
      let postBody = cashOutWaveRequest;
      // verify the required parameter 'cashOutWaveRequest' is set
      if (cashOutWaveRequest === undefined || cashOutWaveRequest === null) {
        throw new Error("Missing the required parameter 'cashOutWaveRequest' when calling cashOutWaveCashoutWavePost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CashOutResponse;
      return this.apiClient.callApi(
        '/cashout/wave', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
