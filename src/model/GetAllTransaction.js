/**
 * NabooApi V1
 * Here you have the first version of the naboo api to create checkout automatically
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GetOneTransaction from './GetOneTransaction';

/**
 * The GetAllTransaction model module.
 * @module model/GetAllTransaction
 * @version 0.1.0
 */
class GetAllTransaction {
    /**
     * Constructs a new <code>GetAllTransaction</code>.
     * @alias module:model/GetAllTransaction
     * @param transactions {Array.<module:model/GetOneTransaction>} 
     */
    constructor(transactions) { 
        
        GetAllTransaction.initialize(this, transactions);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, transactions) { 
        obj['transactions'] = transactions;
    }

    /**
     * Constructs a <code>GetAllTransaction</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GetAllTransaction} obj Optional instance to populate.
     * @return {module:model/GetAllTransaction} The populated <code>GetAllTransaction</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GetAllTransaction();

            if (data.hasOwnProperty('transactions')) {
                obj['transactions'] = ApiClient.convertToType(data['transactions'], [GetOneTransaction]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GetAllTransaction</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GetAllTransaction</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of GetAllTransaction.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['transactions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['transactions'])) {
                throw new Error("Expected the field `transactions` to be an array in the JSON data but got " + data['transactions']);
            }
            // validate the optional field `transactions` (array)
            for (const item of data['transactions']) {
                GetOneTransaction.validateJSON(item);
            };
        }

        return true;
    }


}

GetAllTransaction.RequiredProperties = ["transactions"];

/**
 * @member {Array.<module:model/GetOneTransaction>} transactions
 */
GetAllTransaction.prototype['transactions'] = undefined;






export default GetAllTransaction;

