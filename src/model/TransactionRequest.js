/**
 * NabooApi V1
 * Here you have the first version of the naboo api to create checkout automatically
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ProductModel from './ProductModel';
import Wallet from './Wallet';

/**
 * The TransactionRequest model module.
 * @module model/TransactionRequest
 * @version 0.1.0
 */
class TransactionRequest {
    /**
     * Constructs a new <code>TransactionRequest</code>.
     * @alias module:model/TransactionRequest
     * @param methodOfPayment {Array.<module:model/Wallet>} 
     * @param products {Array.<module:model/ProductModel>} 
     */
    constructor(methodOfPayment, products) { 
        
        TransactionRequest.initialize(this, methodOfPayment, products);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, methodOfPayment, products) { 
        obj['method_of_payment'] = methodOfPayment;
        obj['products'] = products;
        obj['is_escrow'] = false;
        obj['is_merchant'] = false;
    }

    /**
     * Constructs a <code>TransactionRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TransactionRequest} obj Optional instance to populate.
     * @return {module:model/TransactionRequest} The populated <code>TransactionRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TransactionRequest();

            if (data.hasOwnProperty('method_of_payment')) {
                obj['method_of_payment'] = ApiClient.convertToType(data['method_of_payment'], [Wallet]);
            }
            if (data.hasOwnProperty('products')) {
                obj['products'] = ApiClient.convertToType(data['products'], [ProductModel]);
            }
            if (data.hasOwnProperty('success_url')) {
                obj['success_url'] = ApiClient.convertToType(data['success_url'], 'String');
            }
            if (data.hasOwnProperty('error_url')) {
                obj['error_url'] = ApiClient.convertToType(data['error_url'], 'String');
            }
            if (data.hasOwnProperty('is_escrow')) {
                obj['is_escrow'] = ApiClient.convertToType(data['is_escrow'], 'Boolean');
            }
            if (data.hasOwnProperty('is_merchant')) {
                obj['is_merchant'] = ApiClient.convertToType(data['is_merchant'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TransactionRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TransactionRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TransactionRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['method_of_payment'])) {
            throw new Error("Expected the field `method_of_payment` to be an array in the JSON data but got " + data['method_of_payment']);
        }
        if (data['products']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['products'])) {
                throw new Error("Expected the field `products` to be an array in the JSON data but got " + data['products']);
            }
            // validate the optional field `products` (array)
            for (const item of data['products']) {
                ProductModel.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['success_url'] && !(typeof data['success_url'] === 'string' || data['success_url'] instanceof String)) {
            throw new Error("Expected the field `success_url` to be a primitive type in the JSON string but got " + data['success_url']);
        }
        // ensure the json data is a string
        if (data['error_url'] && !(typeof data['error_url'] === 'string' || data['error_url'] instanceof String)) {
            throw new Error("Expected the field `error_url` to be a primitive type in the JSON string but got " + data['error_url']);
        }

        return true;
    }


}

TransactionRequest.RequiredProperties = ["method_of_payment", "products"];

/**
 * @member {Array.<module:model/Wallet>} method_of_payment
 */
TransactionRequest.prototype['method_of_payment'] = undefined;

/**
 * @member {Array.<module:model/ProductModel>} products
 */
TransactionRequest.prototype['products'] = undefined;

/**
 * @member {String} success_url
 */
TransactionRequest.prototype['success_url'] = undefined;

/**
 * @member {String} error_url
 */
TransactionRequest.prototype['error_url'] = undefined;

/**
 * @member {Boolean} is_escrow
 * @default false
 */
TransactionRequest.prototype['is_escrow'] = false;

/**
 * @member {Boolean} is_merchant
 * @default false
 */
TransactionRequest.prototype['is_merchant'] = false;






export default TransactionRequest;

